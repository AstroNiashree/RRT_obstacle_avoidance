%%%%%%%%%%%%%%%%%%%%%%
% Created by : Payal Nandi
% Autonomous UnderWater Robotics 
% Instructor: Dr. Kaipa
%%%%%%%%%%%%%%%%%%%%%%

clear all;  clc; close all;
x0=100; y0=100; z0=100;

% Draw the sphere
r=[30;20;20;15;15];
circleCenter = [100,100,100;50,50,50;100,40,60;150,100,100;60,130,50];
[x,y,z]=sphere;
for i = 1:length(circleCenter(:,1))
    mesh(r(i)*x+circleCenter(i,1),r(i)*y+circleCenter(i,2),r(i)*z+circleCenter(i,3));hold on;
end
axis equal
% Draw cyclinder

cylCenter = [300,400,0; 450,50,50; 150,40,60];
% cylr=[10;15;10];
cylH =[10;20;25];
[x1,y1,z1]=cylinder;
for i = 1:length(cylCenter(:,1))
mesh(r(i)*x1+cylCenter(i,1),r(i)*y1+cylCenter(i,2),r(i)*z1*cylH(i)+cylCenter(i,3));hold on;
end
hold on;
axis equal

% Image scale to axis on the bottom
img = imread('LandMass2.jpg');            % Load a sample image
xImage = [-50 -50 ; 550 550];             % The x data for the image corners
yImage = [-50 550; -50 550];              % The y data for the image corners
zImage = [0 0; 0 0];                             % The z data for the image corners
surf(xImage,yImage,zImage,...             % Plot the surface
     'CData',img,...
     'FaceColor','texturemap');
axis equal


source=[10 10 10];   % Starting Node
goal=[50 50 100];  % Goal Node
stepsize = 10;
threshold = 10;
maxFailedAttempts = 10000;
display = true;
searchSize = [200 200 600];    

% Ploting The Starting and End Goal
hold on;
scatter3(source(1),source(2),source(3),"filled","g");
scatter3(goal(1),goal(2),goal(3),"filled","b");
text(source(1),source(2),source(3),'  Start');
text(goal(1),goal(2),goal(3),'  Goal');
xlabel('x(m)'); ylabel('y(m)'); zlabel('z(m)');
title('Q-Learning with RRT Algorithm UAV planning path');
axis([-10 600 -10 600  -10 600])

tic;  % tic-toc: Functions for Elapsed Time
QL = double([source -1]);
failedAttempts = 0;
pathFound = false;

nq = [];
%% Defiing loop
while failedAttempts <= maxFailedAttempts  % loop to grow RRTs
    %% chooses a random configuration
    if rand < 0.5
        sample = rand(1,3) .* searchSize;   % random sample
    else
        sample = goal; % sample taken as goal to bias tree generation to goal
    end
    %% selects the node in the QL tree that is closest to qrand
    distanceCost(QL(:,1:3),sample)
    [A, I] = min( distanceCost(QL(:,1:3),sample) ,[],1) % find the minimum value of each column of A
    AL = [A I] % for debugging
    closestNode = QL(I(1),1:3)
    %% moving from qnearest an incremental distance in the direction of qrand
   
    movingVec = [sample(1)-closestNode(1),sample(2)-closestNode(2),sample(3)-closestNode(3)];
    movingVec = movingVec/sqrt(sum(movingVec.^2)); % normalize the movingvec to get a unit vector which defines only the direction   
    newPoint = closestNode + stepsize * movingVec; % so the closestNode a stepsize in the given direction
    
    if ~checkPath3(closestNode, newPoint, circleCenter,r) % if extension of closest node in tree to the new point is feasible
        failedAttempts = failedAttempts + 1;
        continue;
    end
    
    if distanceCost(newPoint,goal) < threshold, pathFound = true; break; end % goal reached
    [A, I2] = min( distanceCost(QL(:,1:3),newPoint) ,[],1); % check if new node is not already pre-existing in the tree
    if distanceCost(newPoint,QL(I2(1),1:3)) < threshold, failedAttempts = failedAttempts + 1; continue; end 
    
   
    QL = [QL; newPoint I(1)]; % add node
 
    
    failedAttempts = 0;
    if display, plot3([closestNode(1);newPoint(1)],[closestNode(2);newPoint(2)],[closestNode(3);newPoint(3)],'LineWidth',1);end
    pause(0.05);

    nq = [nq;newPoint]
end


if display && pathFound, plot3([closestNode(1);goal(1)],[closestNode(2);goal(2)],[closestNode(3);goal(3)]); end
if display, disp('click/press any key'); waitforbuttonpress; end
if ~pathFound, error('no path found. maximum attempts reached'); end


%% retrieve path from parent information
path = goal;

prev = I(1);
while prev > 0
    path = [QL(prev,1:3); path];
    prev = QL(prev,4);
end

pathLength = 0;
for i=1:length(path(:,1))-1, pathLength = pathLength + distanceCost(path(i,1:3),path(i+1,1:3)); end % calculate path length
fprintf('processing time=%d \nPath Length=%d \n\n', toc, pathLength); 

%% Display figure with the shortest path

figure(2)

for i = 1:length(circleCenter(:,1))
    mesh(r(i)*x+circleCenter(i,1),r(i)*y+circleCenter(i,2),r(i)*z+circleCenter(i,3));hold on;
end

% Draw cyclinder

cylCenter = [300,400,0;450,50,50;150,40,60];
cylr=[10;15;10];
cylH =[10;20;25];
[x1,y1,z1]=cylinder;
for i = 1:length(cylCenter(:,1))
mesh(r(i)*x1+cylCenter(i,1),r(i)*y1+cylCenter(i,2),r(i)*z1*cylH(i)+cylCenter(i,3));hold on;
end
hold on;
axis equal

hold on;
scatter3(source(1),source(2),source(3),"filled","g");
scatter3(goal(1),goal(2),goal(3),"filled","b");
plot3(path(:,1),path(:,2),path(:,3),'LineWidth',2,'color','r');
text(source(1),source(2),source(3),'  Start');
text(goal(1),goal(2),goal(3),'  Goal');
xlabel('x(m)'); ylabel('y(m)'); zlabel('z(m)');
title('Q-Learning with RRT Algorithm UAV planning path');
axis([-10 600 -10 600  -10 600])

% Image scale to axis on the bottom
img = imread('LandMass2.jpg');            % Load a sample image
xImage = [-50 -50 ; 550 550];             % The x data for the image corners
yImage = [-50 550; -50 550];              % The y data for the image corners
zImage = [0 0; 0 0];                             % The z data for the image corners
surf(xImage,yImage,zImage,...             % Plot the surface
     'CData',img,...
     'FaceColor','texturemap');
axis equal

%% checkPath3.m	
function feasible=checkPath3(n,newPos,circleCenter,r)
feasible=true;
movingVec = [newPos(1)-n(1),newPos(2)-n(2),newPos(3)-n(3)];
movingVec = movingVec/sqrt(sum(movingVec.^2)); %Unitization or Normalizing
for R=0:0.5:sqrt(sum((n-newPos).^2))
    posCheck=n + R .* movingVec;
    if ~(feasiblePoint3(ceil(posCheck),circleCenter,r) && feasiblePoint3(floor(posCheck),circleCenter,r))
        feasible=false;break;
    end
end
if ~feasiblePoint3(newPos,circleCenter,r), feasible=false; end
end
%% distanceCost.m
function h= distanceCost(a,b)         
	h = sqrt(sum((a-b).^2, 2));
end

%% feasiblePoint3.m
function feasible=feasiblePoint3(point,circleCenter,r)
feasible=true;

% check if collission-free spot and inside maps
for row = 1:length(circleCenter(:,1))
    if sqrt(sum((circleCenter(row,:)-point).^2)) <= r(row)
        feasible = false;break;
    end
end
end

